//7 kyu
//Instructions: Write a method, that gets an array of integer-numbers and return an array of the averages of each integer-number and his follower, if there is one.
//If the array has 0 or 1 values or is null or None, your method should return an empty array.


using System;
using System.Collections.Generic;

public class Kata
{
  public static double[] Averages(int[] numbers)
  {
    List<double> averages = new List<double>();
    if (numbers == null || numbers.Length <2 )
      {return averages.ToArray();}
      else
    {
    for (int i = 0; i < numbers.Length - 1; i++)
      {
       double average = (double)(numbers[i] + numbers[i+1])/2;
       averages.Add(average);
      }
      return averages.ToArray();
    }   
  }
}

//test
using NUnit.Framework;
using System;
using System.Linq;

public class SolutionTest
{
  [Test]
  public void BasicTests()
  {
    Assert.AreEqual(string.Join(", ", new double[] { 2, 2, 2, 2 }), string.Join(", ", Kata.Averages(new int[] { 2, 2, 2, 2, 2 })));
    Assert.AreEqual(string.Join(", ", new double[] { 0, 0, 0, 0 }), string.Join(", ", Kata.Averages(new int[] { 2, -2, 2, -2, 2 })));
    Assert.AreEqual(string.Join(", ", new double[] { 2, 4, 3, -4.5 }), string.Join(", ", Kata.Averages(new int[] { 1, 3, 5, 1, -10 })));
  }
  
  [Test]
  public void NullEmptyTests()
  {
    Assert.AreEqual(0, Kata.Averages(null).Length, "input 'null' should return an empty array");
    Assert.AreEqual(0, Kata.Averages(new int[0]).Length, "Empty array as input should return an empty array");
    Assert.AreEqual(0, Kata.Averages(new int[] { 2 }).Length, "Array with only one value as input should return an empty array");
  }
  
  [Test]
  public void RandomTests()
  {
    var rand = new Random();
    
    Func<int[], double[]> myAverages = delegate (int[] numbers)
    {
      if(numbers == null || numbers.Length < 2)
      {
        return new double[0];
      }
      
      var averages = new double[numbers.Length - 1];
      for(int i=0;i<numbers.Length-1;i++)
      {
        averages[i] = ((double)numbers[i] + numbers[i+1]) / 2;
      }
      return averages;
    };
    
    for(int r = 0; r < 100; r++)
    {
      var numbers = Enumerable.Range(0, rand.Next(0, 20)).Select(a => rand.Next(-20, 21)).ToArray();
            
      Assert.AreEqual(myAverages(numbers.ToArray()), Kata.Averages(numbers.ToArray()), "Should work for random input");
    }
  }  
}
