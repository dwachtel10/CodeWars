//8 kyu
//Instructions:
//Complete function saleHotdogs/SaleHotDogs, function accept 1 parameters:n, n is the number of customers to buy hotdogs, different numbers have different prices (refer to the following table), return a number that the customer need to pay how much money.

//+---------------+-------------+
//|  numbers n    | price(cents)|
//+---------------+-------------+
//|n<5            |    100      |
//+---------------+-------------+
//|n>=5 and n<10  |     95      |
//+---------------+-------------+
//|n>=10          |     90      |
//+---------------+-------------+

//intended to be a JS exercise but a good reminder that ternary operators are good for more than two options
public class Kata
{
  public static int SaleHotDogs(int n) => n < 5 ? n * 100 : n >= 10 ? n * 90 : n * 95;
  
}

//tests
namespace Solution 
{
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class SolutionTest
  {
    [Test]
    public void SampleTest()
    {
      Assert.AreEqual(100, Kata.SaleHotDogs(1));
      Assert.AreEqual(400, Kata.SaleHotDogs(4));
      Assert.AreEqual(475, Kata.SaleHotDogs(5));
      Assert.AreEqual(855, Kata.SaleHotDogs(9));
      Assert.AreEqual(900, Kata.SaleHotDogs(10));
      Assert.AreEqual(9000, Kata.SaleHotDogs(100));
    }
  }
}
