//8 kyu
//Instructions:, your task is to define a function xor(a, b) where a and b are the two expressions to be evaluated. 
//Your xor function should have the behaviour described above, returning true if exactly one of the two expressions evaluate to true, false otherwise.

public class Kata
{
  public static bool Xor(bool a, bool b) => ((a || b) && !(a && b));
}

//test

namespace Solution 
{
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class KataTests
  {
    [Test]
    public void BasicTests()
    {
        testing(Kata.Xor(false, false), false);
        testing(Kata.Xor(true, false), true);
        testing(Kata.Xor(false, true), true);
        testing(Kata.Xor(true, true), false);
    }
    
    [Test]
    public void NestedTests()
    {
        testing(Kata.Xor(false, Kata.Xor(false, false)), false);
        testing(Kata.Xor(Kata.Xor(true, false), false), true);
        testing(Kata.Xor(Kata.Xor(true, true), false), false);
        testing(Kata.Xor(true, Kata.Xor(true, true)), true);
        testing(Kata.Xor(Kata.Xor(false, false), Kata.Xor(false, false)), false);
        testing(Kata.Xor(Kata.Xor(false, false), Kata.Xor(false, true)), true);
        testing(Kata.Xor(Kata.Xor(true, false), Kata.Xor(false, false)), true);
        testing(Kata.Xor(Kata.Xor(true, false), Kata.Xor(true, false)), false);
        testing(Kata.Xor(Kata.Xor(true, true), Kata.Xor(true, false)), true);
        testing(Kata.Xor(Kata.Xor(true, Kata.Xor(true, true)), Kata.Xor(Kata.Xor(true, true), false)), true);
    }
    
    private static void testing(bool actual, bool expected) 
    {
        Assert.AreEqual(expected, actual);
    }
  }
}
