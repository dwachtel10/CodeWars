//7 kyu
//Write a function that takes an array and counts the number of each unique element present.

using System;
using System.Collections.Generic;
using System.Linq;

public static class Kata
{
  public static Dictionary<string, int> Count(List<string> lst)
  {
    Dictionary<string, int> result = new Dictionary<string, int>();
    foreach (string str in lst)
      {
        if (!result.ContainsKey(str))
          {
            int count = lst.Count(x => x == str);
            result.Add(str, count);
          }
      }
    return result;
  }
}

//tests

namespace Solution 
{
  using NUnit.Framework;
  using System;
  using System.Collections.Generic;
  using System.Linq;
  
  public static class Solution
  {
    public static Dictionary<string, int> Count(List<string> lst) =>
      lst.GroupBy(v => v)
         .ToDictionary(v => v.Key, v => v.Count());
  }

  [TestFixture]
  public class BasicTests
  {
    [Test, Description("Returns an empty dictionary for an empty list")]
    public void EmptyTest()
    {
      Assert.AreEqual(new Dictionary<string, int>(), Kata.Count(new List<string>()));
    }
  
    [Test, Description("Counts a list with a single element")]
    public void SingleTest()
    {
      Assert.AreEqual(new Dictionary<string, int> {{"a", 1}}, Kata.Count(new List<string> {"a"}));
    }
  
    [Test, Description("Counts a more complex list")]
    public void SampleTest()
    {
      Assert.AreEqual(new Dictionary<string, int> {{"a", 2}, {"b", 3}}, Kata.Count(new List<string> {"a", "b", "b", "a", "b"}));
    }
  }
  
  [TestFixture]
  public class RandomTests
  {
    [Test, Description("Counts the elements of a random list of strings")]
    public void Test()
    {
      const int Tests = 100;
      Random rnd = new Random();
      List<string> choices = new List<string> {"Ryoma Nagare","Hayato Jin","Musashi Tomoe","Benkei Kurama","Saotome-agase","Michiru Saotome"};
      
      for (int i = 0; i < Tests; ++i)
      {
        List<string> lst = new string[rnd.Next(0, 50)].Select(_ => choices[rnd.Next(0, choices.Count)]).ToList();
        List<string> clone = new List<string>(lst);
        
        Dictionary<string, int> expected = Solution.Count(lst);
        Dictionary<string, int> actual = Kata.Count(lst);
        
        Assert.AreEqual(clone, lst, "Don't mutate the given list!");
        Assert.AreEqual(expected, actual);
      }
    }
  }
}
