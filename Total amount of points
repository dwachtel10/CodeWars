//8 kyu
//Our football team finished the championship. The result of each match look like "x:y". Results of all matches are recorded in the collection.

//Write a function that takes such collection and counts the points of our team in the championship. Rules for counting points for each match:

//if x>y - 3 points
//if x<y - 0 point
//if x=y - 1 point

using System;
using System.Linq;

public static class Kata {
    public static int TotalPoints(string[] games) {
        // insert magic here
        int points = 0;
        foreach(string s in games)
          {
            string[] score = s.Split(':');
            if(Convert.ToInt32(score[0]) > Convert.ToInt32(score[1]))
              {
                points += 3;
              }
              else if (Convert.ToInt32(score[0]) == Convert.ToInt32(score[1]))
              {
                points += 1;
              }
              else
              {
                points += 0;
              }
          }
          return points;
    }
}

//test
namespace Solution {
    using NUnit.Framework;
    using System;
    using System.Collections.Generic;
    using System.Linq;

    [TestFixture]
    public class SolutionTest {

        [Test]
        public void Test1() =>
            Test(new[] { "1:0", "2:0", "3:0", "4:0", "2:1", "3:1", "4:1", "3:2", "4:2", "4:3" }, 30);

        [Test]
        public void Test2() =>
            Test(new[] { "1:1", "2:2", "3:3", "4:4", "2:2", "3:3", "4:4", "3:3", "4:4", "4:4" }, 10);

        [Test]
        public void Test3() =>
            Test(new[] { "0:1", "0:2", "0:3", "0:4", "1:2", "1:3", "1:4", "2:3", "2:4", "3:4" }, 0);

        [Test]
        public void Test4() =>
            Test(new[] { "1:0", "2:0", "3:0", "4:0", "2:1", "1:3", "1:4", "2:3", "2:4", "3:4" }, 15);

        [Test]
        public void Test5() =>
            Test(new[] { "1:0", "2:0", "3:0", "4:4", "2:2", "3:3", "1:4", "2:3", "2:4", "3:4" }, 12);
        
        private void Test(string[] input, int expectedOutput) =>
            Assert.AreEqual(expectedOutput, Kata.TotalPoints(input));

        [Test]
        public void RandomTests() {
            for (var i = 0; i < 100; i++)
                RandomTest();
        }

        private void RandomTest() {
            var randomGames = RandomGame().Take(100).ToArray();
            Test(randomGames, Solution(randomGames));

            IEnumerable<string> RandomGame() {
                var random = new Random();
                while (true)
                    yield return $"{random.Next(0, 5)}:{random.Next(0, 5)}";
            }

            int Solution(string[] games) =>
                games.Select(e => (x: e[0], y: e[2])).Select(e => e.x > e.y ? 3 : e.x == e.y ? 1 : 0).Sum();
        }

    }
}
