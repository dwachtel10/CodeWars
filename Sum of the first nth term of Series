//7 kyu
//Your task is to write a function which returns the sum of following series upto nth term(parameter).
//Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...
//You need to round the answer to 2 decimal places and return it as String.
//If the given value is 0 then it should return 0.00
//You will only be given Natural Numbers as arguments.

using System;

public class NthSeries {
	
	public static string seriesSum (int n) {
		double total = 1;
    if (n < 1)
    { return "0.00";}
    else {
    for (int i = 1; i < n; i++)
      {
        total += ((double)1/((1 + (3 * i))));
      }
      
    return total.ToString("0.00");
      }
	}
}

//tests

using System;
using System.Collections.Generic;
using NUnit.Framework;

[TestFixture]
public class NthSeriesTests {
    public static string solution (int n) {
		if (n == 0) return "0.00";
		double s = 1.0;
  		int i = 1;
  		double den = 4.0;
  		while (i < n) {
    		s = s + (1 / den);
    		i++;
    		den += 3.0;
  		}
  		return string.Format("{0:0.00}", s);
	}
    public static void rtests() {
        Random r = new Random();
        for (int i = 0; i < 50; i++) {
            int x = r.Next(0, 100);
            Console.WriteLine("Random Nth with n: " + x);
            Assert.AreEqual(NthSeriesTests.solution(x), NthSeries.seriesSum(x));
        }
    }

[Test]
  public void Test1() {
    Assert.AreEqual("0.00", NthSeries.seriesSum(0));
  }
[Test]
  public void Test2() {
    Assert.AreEqual("1.77", NthSeries.seriesSum(9));
  }
[Test]
  public void Test3() {
    Assert.AreEqual("1.94", NthSeries.seriesSum(15));
  }
[Test]
  public void Test4() {
    Assert.AreEqual("2.26", NthSeries.seriesSum(39));
  }
[Test]
  public void Test5() {
    Assert.AreEqual("2.40", NthSeries.seriesSum(58));
  }
[Test]
    public void Test6() {
    NthSeriesTests.rtests();
  }
  
}
