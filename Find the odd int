//6 kyu
//Given an array, find the int that appears an odd number of times.
//There will always be only one integer that appears an odd number of times.

using System;
using System.Collections.Generic;
using System.Linq;

namespace Solution
{
  class Kata
    {
    public static int find_it(int[] seq) 
      {
      int finalInt = 0;
      IEnumerable<int> intList = seq.ToList();
      foreach(int i in intList)
      {
        int intCountDiv = (from x in intList where x == i select x).Count() % 2;
        if (intCountDiv != 0)
          {
          finalInt = i;
          }
      }
      return finalInt;
      }
       
    }
}

//tests

namespace Solution {
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class SolutionTest
  {
    [Test]
    public void Tests()
    {
      Assert.AreEqual(5 , Kata.find_it ( new[] { 20,1,-1,2,-2,3,3,5,5,1,2,4,20,4,-1,-2,5 }) );
      Assert.AreEqual(-1 , Kata.find_it(new[] { 1,1,2,-2,5,2,4,4,-1,-2,5 }) );
      Assert.AreEqual(5 , Kata.find_it(new[] { 20,1,1,2,2,3,3,5,5,4,20,4,5 }) );
      Assert.AreEqual(10 , Kata.find_it(new[] { 10 }) );
      Assert.AreEqual(10 , Kata.find_it(new[] { 1,1,1,1,1,1,10,1,1,1,1 }) );
      Assert.AreEqual(1 , Kata.find_it(new[] { 5,4,3,2,1,5,4,3,2,10,10 }) );
    }
  }
}
