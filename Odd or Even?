//7 kyu
//Instructions:
//Given an array of numbers (a list in groovy), determine whether the sum of all of the numbers is odd or even.
//Give your answer in string format as 'odd' or 'even'.

using System;
using System.Linq;

public class Kata
{
  public static string OddOrEven(int[] array) => (array.Sum() % 2) == 0 ? "even" : "odd";
}

//test
namespace Solution {
  using NUnit.Framework;
  using System;
  using System.Linq;

  [TestFixture]
  public class SolutionTest
  {
    [Test, Description("Edge tests")]
    public void EdgeTests()
    {
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {0}));
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {1}));
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {}));
    }
    
    [Test, Description("Even tests")]
    public void EvenTests()
    {
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {0, 1, 5}));
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {0, 1, 3}));
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {1023, 1, 2}));
    }
    
    [Test, Description("Negative Even tests")]
    public void NegativeEvenTests()
    {
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {0, -1, -5}));
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {0, -1, -3}));
      Assert.AreEqual("even", Kata.OddOrEven(new int[] {-1023, 1, -2}));
    }
    
    [Test, Description("Odd tests")]
    public void OddTests()
    {
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {0, 1, 2}));
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {0, 1, 4}));
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {1023, 1, 3}));
    }
      
    [Test, Description("Negative Odd tests")]
    public void NegativeOddTests()
    {
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {0, -1, 2}));
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {0, 1, -4}));
      Assert.AreEqual("odd", Kata.OddOrEven(new int[] {-1023, -1, 3}));
    }
    
    private static Random rng = new Random();
    
    private static string Solution(int[] array) =>
      (array.Aggregate(0, (p, c) => p + c) & 1) == 1 ? "odd" : "even";
      
    private static int[] RandomArray()
    {
      int[] array = new int[rng.Next(0, 40)];
      
      for (int i = 0; i < array.Length; ++i)
      {
        array[i] = rng.Next(-1000, 1001);
      }
      
      return array;
    }
    
    [Test, Description("Random tests")]
    public void RandomTests()
    {
      for (int i = 0; i < 400; ++i)
      {
        int[] array = RandomArray();
        string expected = Solution(array);
        string actual = Solution(array);
        Assert.AreEqual(expected, actual);
      }
    }
  }
}
