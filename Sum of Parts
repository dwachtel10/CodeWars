//6 kyu
/*
Let us consider this example (array written in general format):

ls = [0, 1, 3, 6, 10]

Its following parts:

ls = [0, 1, 3, 6, 10]
ls = [1, 3, 6, 10]
ls = [3, 6, 10]
ls = [6, 10]
ls = [10]
ls = []
The corresponding sums are (put together in a list): [20, 20, 19, 16, 10, 0]

The function parts_sums (or its variants in other languages) will take as parameter a list ls and return a list of the sums of its parts as defined above.
*/

//This timed out for the final solution but it passed the basic tests.

using System;
using System.Linq;
using System.Collections.Generic;

class SumParts
{

    public static int[] PartsSums(int[] ls)
    {
      List<int> original = new List<int>();
      foreach(int i in ls)
        {
          original.Add(i);
        }
      List<int> Sums = new List<int>(); 
      while(original.Count > 0) {
        Sums.Add(original.Sum());
        original.RemoveAt(0);
      }
      Sums.Add(0);
      int[] final = Sums.ToArray();
      return final;
    }
}

//test
using System;
using NUnit.Framework;

[TestFixture]
public static class SumPartsTests 
{
    private static void dotest(int[] ls, int[] exp) { 
        int[] ans = SumParts.PartsSums(ls);
        Assert.AreEqual(exp, ans);
    }
[Test]
    public static void atest0() 
    {        
        Console.WriteLine("Basic Tests");
        dotest(new int[] {}, new int[] {0});
        dotest(new int[] {0, 1, 3, 6, 10}, new int[] {20, 20, 19, 16, 10, 0});
        dotest(new int[] {1, 2, 3, 4, 5, 6}, new int[] {21, 20, 18, 15, 11, 6, 0});        
        dotest(new int[] {744125, 935, 407, 454, 430, 90, 144, 6710213, 889, 810, 2579358}, 
                new int[] {10037855, 9293730, 9292795, 9292388, 9291934, 9291504, 9291414, 9291270, 2581057, 2580168, 2579358, 0});
            
    }
}
