//7 kyu
//The two oldest ages function/method needs to be completed. 
//It should take an array of numbers as its argument and return the two highest numbers within the array. 
//The returned value should be an array in the format [second oldest age, oldest age].

using System;
using System.Linq;

public class LargestTwo
{
  public static int[] TwoOldestAges(int[] ages)
  {
    int[] oldestAges = new int[2];
    oldestAges[0] = ages.OrderByDescending(r => r).Skip(1).FirstOrDefault();
    oldestAges[1] = ages.Max();
    
    return oldestAges;
  }
}

//tests
namespace Solution
{
  using System;
  using System.Linq;
  using NUnit.Framework;
  
  [TestFixture]
  public class Tests 
  {
    
    [Test]
    public void Test1() 
    {
    	int[] result = LargestTwo.TwoOldestAges(new[] {1, 2, 10, 8});
    	Assert.AreEqual(new int[] {8, 10}, result);
    }
    
    [Test]
    public void Test2() 
    {
    	int[] result = LargestTwo.TwoOldestAges(new[] {1,5,87,45,8,8});
    	Assert.AreEqual(new int[] {45, 87}, result);
    }
    
    [Test]
    public void Test3() 
    {
    	int[] result = LargestTwo.TwoOldestAges(new[] {6,5,83,5,3,18});
    	Assert.AreEqual(new int[] {18, 83}, result);
    }
    
    [Test]
    public void Test4() 
    {
    	int[] result = LargestTwo.TwoOldestAges(new[] {6,5,83,83});
    	Assert.AreEqual(new int[] {83, 83}, result);
    }
    
    private static Random rnd = new Random();
    
    private static int[] solution(int[] ages)
    {
      int oldest = int.MinValue;
      int second = int.MinValue;
      
      foreach (int age in ages)
      {
        if (age >= oldest)
        {
          second = oldest;
          oldest = age;
        }
        else if (age >= second)
        {
          second = age;
        }
      }
      
      return new int[] {second, oldest};
    }
    
    [Test, Description("Random Tests (100 assertions)")]
    public void RandomTest()
    {
      const int Tests = 100;
      
      for (int i = 0; i < Tests; ++i)
      {
        int[] test = new int[20].Select(_ => rnd.Next(0, 120)).ToArray();
        int[] clone = (int[])test.Clone();
        int[] expected = solution(test);
        int[] actual = LargestTwo.TwoOldestAges(test);
        
        Assert.AreEqual(clone, test, "User mutated the input array!");
        Assert.AreEqual(expected, actual);
      }
    }
  }
}
