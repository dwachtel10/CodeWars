//7 kyu
//Instructions: More generally given parameters:
//p0, percent, aug (inhabitants coming or leaving each year), p (population to surpass)
//the function nb_year should return n number of entire years needed to get a population greater or equal to p.

using System;

class Arge {
    
    public static int NbYear(int p0, double percent, int aug, int p) {
       int years = 0;
       do {
         p0+= (int)(p0 * (percent *.01)) + aug;
         years +=1;    
        } while (p0 < p);
        return years;
    }
}

//tests

using System;
using NUnit.Framework;

[TestFixture]
public static class ArgeTests {

    private static Random rnd = new Random();

    private static void testing(int actual, int expected) {
        Assert.AreEqual(expected, actual);
    }

[Test]
    public static void test1() {
        Console.WriteLine("Testing NbYear");
        testing(Arge.NbYear(1500, 5, 100, 5000), 15);
        testing(Arge.NbYear(1500000, 2.5, 10000, 2000000), 10);
        testing(Arge.NbYear(1500000, 0.25, 1000, 2000000), 94);
        testing(Arge.NbYear(1500000, 0.25, -1000, 2000000), 151);
        testing(Arge.NbYear(1500000, 0.25, 1, 2000000), 116);
        testing(Arge.NbYear(1500000, 0.0, 10000, 2000000), 50);
        testing(Arge.NbYear(1000, 2.0, 50, 1214), 4);
    }
    
    //-----------------------
    private static int NbYearSol(int p0, double percent, int aug, int p) {
        int i = 1;
        double mult = 1 + percent / 100.0;
        double prev = p0;
        while (prev < p) {
            double ne = Math.Floor(prev * mult + aug);
            prev = ne;
            i++;
        }
        return (i - 1);
    }    
    
    //-----------------------
[Test]    
    public static void RandomTest() {
      Console.WriteLine("Random Tests");
      for (int i = 0; i < 100; i++) { 
        int p0 = rnd.Next(10000, 15000000);
        double percent = rnd.Next(50, 1000) / 100.0;
        int aug = (int)(p0 / 200.0);
        int k = rnd.Next(5, 100);
        int p = p0 + k * aug; 
        testing(Arge.NbYear(p0, percent, aug, p), NbYearSol(p0, percent, aug, p)); 
      }
    }  
}
