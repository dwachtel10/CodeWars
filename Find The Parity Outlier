//6 kyu
//You are given an array (which will have a length of at least 3, but could be very large) containing integers. 
//The array is either entirely comprised of odd integers or entirely comprised of even integers except for a single integer N. 
//Write a method that takes the array as an argument and returns this "outlier" N.

using System.Collections.Generic;
using System.Linq;
using System;
//could have used Linq here but honestly this feels simple enough as is

public class Kata
{
  public static int Find(int[] integers)
  {
    List<int> evens = new List<int>();
    List<int> odds = new List<int>();
    foreach(int n in integers)
    {
      if(n % 2 == 0)
        {evens.Add(n);}
      else
        {odds.Add(n);}
    }
    if (evens.Count == 1)
      {return evens[0];}
    else
      {return odds[0];}
  }
}

//test
using NUnit.Framework;
using System;

[TestFixture]
public class Tests
{
  [Test]
  public static void Test1()
  {
    int[] exampleTest1 = {2,6,8,-10,3}; 
    Assert.IsTrue(3 == Kata.Find(exampleTest1));
  }
  
  [Test]
  public static void Test2()
  {  
    int[] exampleTest2 = {206847684,1056521,7,17,1901,21104421,7,1,35521,1,7781};
    Assert.IsTrue(206847684 == Kata.Find(exampleTest2));
  }
  
  [Test]
  public static void Test3()
  {
    int[] exampleTest3 = { int.MaxValue, 0, 1 };
    Assert.IsTrue(0 == Kata.Find(exampleTest3));
  }
}
