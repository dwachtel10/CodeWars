//7 kyu
//Instructions:  Complete the function that takes two numbers as input, num and nth and return the nth digit of num (counting from right to left).
//If num is negative, ignore its sign and treat it as a positive value
//If nth is not positive, return -1
//Keep in mind that 42 = 00042. This means that findDigit(42, 5) would return 0

using System;
using System.Linq;
using System.Collections.Generic;

public class Kata
{
  public static int FindDigit(int num, int nth)
  {
  char[] backnumber = Math.Abs(num).ToString().Reverse().ToArray();
  int arrayLength = backnumber.Length;
  List<int> numbers = new List<int>();
  foreach (char c in backnumber)
    {
    numbers.Add(Convert.ToInt32(char.GetNumericValue(c)));
    }
  
  if (nth < 1)
    { return - 1;}
    else
    {
      if (nth <= arrayLength)
      {
        int index = nth - 1;
        return numbers[index];
      }
      else
      {
        return 0;
      }
    }
  }
}

//tests
namespace Solution {
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class SolutionTest
  {
    [Test]
    public void SampleTest()
    {
      Assert.AreEqual(5, Kata.FindDigit(5673, 4));
      Assert.AreEqual(2, Kata.FindDigit(129, 2));
      Assert.AreEqual(8, Kata.FindDigit(-2825, 3));
      Assert.AreEqual(0, Kata.FindDigit(-456, 4));
      Assert.AreEqual(0, Kata.FindDigit(0, 20));
      Assert.AreEqual(-1, Kata.FindDigit(65, 0));
      Assert.AreEqual(-1, Kata.FindDigit(24, -8));
    }
  }
}
