//8 kyu
//Instructions: You have to return which player won! In case of a draw return Draw!.


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;


//There's gotta be a better way!

public class Kata
{
  public string Rps(string p1, string p2)
  {
    if (p1 == p2)
      {
        return "Draw!";
      }
      else if ((p1 == "scissors" && p2 == "paper") || (p1 == "rock" && p2 =="scissors") || (p1 == "paper" && p2 == "rock"))
      {
      return "Player 1 won!";
      }
      else
      {
      return "Player 2 won!";
      }
  }
}

//tests

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using NUnit.Framework;

[TestFixture]
public class KataTests
{
  Kata kata = new Kata();
  
	[Test]
	public void Player1Win()
  {
    Assert.AreEqual("Player 1 won!", kata.Rps("rock", "scissors"));
    Assert.AreEqual("Player 1 won!", kata.Rps("scissors", "paper"));
    Assert.AreEqual("Player 1 won!", kata.Rps("paper", "rock"));
  }
  
	[Test]
	public void Player2Win()
  {
    Assert.AreEqual("Player 2 won!", kata.Rps("scissors", "rock"));
    Assert.AreEqual("Player 2 won!", kata.Rps("paper", "scissors"));
    Assert.AreEqual("Player 2 won!", kata.Rps("rock", "paper"));
  }
  
	[Test]
	public void Draw()
  {
    Assert.AreEqual("Draw!", kata.Rps("rock", "rock"));
    Assert.AreEqual("Draw!", kata.Rps("scissors", "scissors"));
    Assert.AreEqual("Draw!", kata.Rps("paper", "paper"));
  }
}
