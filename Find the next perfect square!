//7 kyu

//Instructions:
//You might know some pretty large perfect squares. But what about the NEXT one?
//Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.
//If the parameter is itself not a perfect square, than -1 should be returned. You may assume the parameter is positive.


using System;

public class Kata
{
  public static long FindNextSquare(long num)
  {
    if(isSquare(num) == true)
      {
        long target = num;
        do
        {
          target++;
        }
        while (isSquare(target) == false);
        return target;
      }
    else 
      { return -1; }
  }
  
  static bool isSquare(long n)
  {
    decimal sq = Convert.ToDecimal(Math.Sqrt(n));
    
      if (sq % 1 == 0)
        {
          return true;
        }
    
    return false;
  }
  
  //tests
  
  using NUnit.Framework;
using System;

[TestFixture]
public class Tests
{
  [Test]
  [TestCase(155, ExpectedResult=-1)]
  [TestCase(121, ExpectedResult=144)]
  [TestCase(625, ExpectedResult=676)]
  [TestCase(319225, ExpectedResult=320356)]
  [TestCase(15241383936, ExpectedResult=15241630849)]
  public static long FixedTest(long num)
  {
    return Kata.FindNextSquare(num);
  }
  
  [Test]
  public static void RandomTest([Random(0,999999999,100)] long num)
  {
    Assert.AreEqual(Solution(num), Kata.FindNextSquare(num), string.Format("Should work for {0}", num));
  }
  
  private static long Solution(long num)
  {
    if(!IsPerfSquare(num))
      return -1;
    do
    {
      num++;
    } while(!IsPerfSquare(num));
    return num;
  }
  
  private static bool IsPerfSquare(long num)
  {
    return Math.Sqrt(num) % 1 == 0;
  }
}
