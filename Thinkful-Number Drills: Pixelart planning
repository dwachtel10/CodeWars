//8 kyu
//Instructions:
//Your function should take two arguments: the size of the wall in millimeters and the size of a pixel in millimeters. 
//It should return True if you can fit an exact number of pixels on the wall, otherwise it should return False. 
//For example is_divisible(4050, 27) should return True, but is_divisible(4066, 27) should return False.

using System;

public static class Kata
{
  public static bool IsDivisible(int wallLength, int pixelSize) => (wallLength % pixelSize) == 0;
}

//tests
namespace Solution 
{
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class SolutionTest
  {
    [Test]
    public void SampleTest()
    {
      Assert.AreEqual(true, Kata.IsDivisible(4050, 27));
      Assert.AreEqual(false, Kata.IsDivisible(4066, 27));
      Assert.AreEqual(true, Kata.IsDivisible(10000, 20));
      Assert.AreEqual(false, Kata.IsDivisible(10005, 20));
      Assert.AreEqual(true, Kata.IsDivisible(10005, 1));
    }
    
    [Test]
    public void RanomTest()
    {
      Random rnd = new Random();
      
      for (int i = 0; i < 100; ++i)
      {
        int a = rnd.Next(500, 11000),
            b = rnd.Next(2, 28);
            
        Assert.AreEqual(a % b == 0, Kata.IsDivisible(a, b));
      }
    }
  }
}
