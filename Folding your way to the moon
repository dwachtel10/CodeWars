//7 kyu
//Instructions:
//You know that a piece of paper has a thickness of 0.0001m. 
//Given distance in units of meters, calculate how many times you have to fold the paper to make the paper reach this distance.
//(If you're not familiar with the concept of folding a paper: Each fold doubles its total thickness.)

public class Kata
{
  public static int? FoldTo(double distance)
  {
    int foldCount = 0;
    double foldsize = .0001;
    if (distance > 0){
      while (foldsize < distance)
        {
          foldsize *= 2; foldCount +=1;
        }
      return foldCount;
    }
    else {return null;}
  }
}

//test
namespace Solution {
  using NUnit.Framework;
  using System;
  using System.Diagnostics;

  [TestFixture]
  public class SolutionTest
  {
    private static Random rnd = new Random();
    
    private static int? solution(double distance)
    {
      // return null if distance is negative or 0
      if (distance <= 0) { return null; }
      
      const double initialThickness = 0.0001;
      
      return (int)Math.Max(Math.Ceiling(Math.Log(distance / initialThickness, 2)), 0);
    }
  
    private static object[] Basic_Test_Cases = new object[]
    {
      new object[] {384000000, 42},
      new object[] {0.000001, 0},
    };
  
    [Test, TestCaseSource(typeof(SolutionTest), "Basic_Test_Cases")]
    public void Basic_Test(double distance, int? expected)
    {
      Assert.AreEqual(expected, Kata.FoldTo(distance));
    }
    
    [Test, Description("Random Tests (1000 assertions)")]
    public void Random_Test()
    {
      Stopwatch sw = new Stopwatch();
      const int tests = 1000;
      
      for (int i = 0; i < tests; ++i)
      {
        double distance, random = rnd.NextDouble();
        if (random < 0.1) { distance = 0; }
        else { distance = 0.0001*Math.Pow(2, rnd.NextDouble()*(128+22)-22); }
        if (random > 0.9) { distance *= -1; }
        Console.WriteLine("Distance: {0}m", distance);
        
        int? expected = solution(distance);
        
        sw.Start();
        int? actual = Kata.FoldTo(distance);
        sw.Stop();
        
        Assert.AreEqual(expected, actual);
      }
      
      Console.WriteLine("\nRandom tests passed!\nUser code execution time was {0} milliseconds over {1} assertions.", sw.Elapsed.TotalMilliseconds, tests);
    }
    
  }
}
