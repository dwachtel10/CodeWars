//7 kyu
//Several people are standing in a row divided into two teams.
//The first person goes into team 1, the second goes into team 2, the third goes into team 1, and so on.
//Given an array of positive integers (the weights of the people), return a new array/tuple of two integers, 
//where the first one is the total weight of team 1, and the second one is the total weight of team 2.

class Kata
{
    public static int[] RowWeights(int[] a)
    {
        int[] weights = new int[2];
        int weight1 = 0;
        int weight2 = 0;
        int counter = 1;
        foreach(int n in a)
          {
            if(counter % 2 == 0)
              {
                weight2 += n;
              }
              else
              {
                weight1 += n;
              }
              counter++;
          }
        weights[0] = weight1;
        weights[1] = weight2;
        return weights;
    }
}

//tests

using System;
using System.Linq;
using NUnit.Framework;

[TestFixture]
class Tests
{
    [TestCase("0", "0 0")]
    [TestCase("80", "80 0")]
    [TestCase("0 1 0", "0 1")]
    [TestCase("100 50", "100 50")]
    [TestCase("13 27 49", "62 27")]
    [TestCase("50 60 70 80", "120 140")]
    [TestCase("70 58 75 34 91", "236 92")]
    [TestCase("100 51 50 100", "150 151")]
    [TestCase("29 83 67 53 19 28 96", "211 164")]
    [TestCase("39 84 74 18 59 72 35 61", "207 235")]
    public void BasicTests(string s, string ex)
    {
        var a = s.Split().Select(int.Parse).ToArray();
        var expected = ex.Split().Select(int.Parse).ToArray();
        Assert.That(Kata.RowWeights(a), Is.EqualTo(expected));
    }
    [Test]
    public void RandomTests()
    {
        for (int i = 0; i < 40; i++)
        {
            var a = new[] { 0 };
            var expected = RowWeightsSolution(a);
            Assert.That(Kata.RowWeights(a), Is.EqualTo(expected));
        }
    }
    Random rnd = new Random();
    int R() => rnd.Next(1, (int)Math.Pow(10, rnd.Next(1, 4)));
    int SumUp(int[] array, int n) => array.Where((x, i) => i % 2 == n).Sum();
    int[] RowWeightsSolution(int[] array) => new[] { SumUp(array, 0), SumUp(array, 1) };
    int[] CreateArray() => Enumerable.Range(0, rnd.Next(1, 36)).Select(x => R()).ToArray();
}
