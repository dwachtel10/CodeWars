//7 kyu
//An element is leader if it is greater than The Sum all the elements to its right side.
//Given an array/list [] of integers , Find all the LEADERS in the array.


using System;
using System.Linq;
using System.Collections.Generic;

public static class Kata
{
  public static int[] ArrayLeaders(int[] numbers)
  {
    List<int> leaders = new List<int>();
    int index = 0;
    foreach(int n in numbers)
      {
        if(index < numbers.Length){
        if (n > numbers.Skip(index + 1).Sum())
          {
            leaders.Add(n);
          }
        }
        else {
          if(n > 0){ leaders.Add(n);}
              }
        index++;
      }
      int[] result = leaders.ToArray();
      return result;
  }
}

//tests

using System;
using System.Collections.Generic;
using NUnit.Framework;  

[TestFixture]
public class TestFixture
{
  [Test, Description("Positive Values")]   
  [TestCase(new int[] { 1, 2, 3, 4, 0 }, ExpectedResult=new int[] { 4 })]
  [TestCase(new int[] { 16, 17, 4, 3, 5, 2 }, ExpectedResult=new int[] { 17, 5, 2 })]
  public int[] PositiveTests(int[] numbers)
  {
    return Kata.ArrayLeaders(numbers);
  }
  
  [Test, Description("Negative Values")]   
  [TestCase(new int[] { -1, -29, -26, -2 }, ExpectedResult=new int[] { -1 })]
  [TestCase(new int[] { -36, -12, -27 }, ExpectedResult=new int[] { -36, -12 })]
  public int[] NegativeTests(int[] numbers)
  {
    return Kata.ArrayLeaders(numbers);
  }
  
  [Test, Description("Mixed Values")]   
  [TestCase(new int[] { 5, -2, 2 }, ExpectedResult=new int[] { 5, 2 })]
  [TestCase(new int[] { 0, -1, -29, 3, 2 }, ExpectedResult=new int[] { 0, -1, 3, 2 })]
  public int[] MixedTests(int[] numbers)
  {
    return Kata.ArrayLeaders(numbers);
  }
  
  [Test, Description("Random Values")]   
  public void RandomTests()
  {
    var RNG = new Random();
    for (var i = 0; i < 100; i++)
    {      
      var length = RNG.Next(10, 200);
      var input = new int[length];
      for (var j = 0; j < length; j++)
      {
        input[j] = RNG.Next(-1000, 1000);
      }
      var expected = Solution(input);
      var actual = Kata.ArrayLeaders(input);      
      Assert.AreEqual(actual, expected);
    }
  }
  
  public static int[] Solution(int[] numbers)
  {
    var answers = new List<int>();
    var sum = 0;
    numbers = (int[])numbers.Clone();
    Array.Reverse(numbers);
    foreach (var number in numbers)
    {
      if (number > sum)
      {
        answers.Insert(0, number);
      }
      sum += number;
    }
    return answers.ToArray();
  }  
}
