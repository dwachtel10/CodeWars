//7 kyu
//Instructions: As a part of this Kata, you need to create a function that when provided with a triplet, 
//returns the index of the numerical element that lies between the other two elements.

using System;
using System.Linq;
//Not proud of this
public class Kata
{
  public static int Gimme(double[] inputArray)
  {
    if ((inputArray[2] > inputArray[0]) && (inputArray[0] > inputArray[1]) || (inputArray[1] > inputArray[0]) && (inputArray[0] > inputArray[2]))
      { return 0;}
    else if ((inputArray[0] > inputArray[1]) && (inputArray[1] > inputArray[2]) || (inputArray[2] > inputArray[1]) && (inputArray[1] > inputArray[0]))
      {return 1;}
    else
      {return 2;}
  }
}

//tests
namespace Solution {
  using NUnit.Framework;
  using System;

  [TestFixture]
  public class Test
  {
    [Test]
    public void SampleTests()
    {
      Assert.AreEqual(0, Kata.Gimme(new double[] {2, 3, 1}));
      Assert.AreEqual(1, Kata.Gimme(new double[] {5, 10, 14}));
    }
    
    [Test]
    public void FloatTests()
    {
      Assert.AreEqual(0, Kata.Gimme(new double[] {2.1, 3.2, 1.4}));
      Assert.AreEqual(1, Kata.Gimme(new double[] {5.9, 10.4, 14.2}));
    }
    
    [Test]
    public void NegativeTests()
    {
      Assert.AreEqual(0, Kata.Gimme(new double[] {-2, -3, -1}));
      Assert.AreEqual(1, Kata.Gimme(new double[] {-5, -10, -14}));
    }
    
    [Test]
    public void MixedTests()
    {
      Assert.AreEqual(0, Kata.Gimme(new double[] {-2, -3.2, 1}));
      Assert.AreEqual(0, Kata.Gimme(new double[] {-5.2, -10.6, 14}));
    }
    
    public static int Solution(double[] inputArray)
    {
      double[] sorted = (double[])inputArray.Clone();
      Array.Sort(sorted);
      return Array.IndexOf(inputArray, sorted[1]);
    }
    
    private static Random rnd = new Random();
    
    [Test]
    public void RandomTests()
    {
      for (int i = 0; i < 40; ++i)
      {
        double[] testCase = new double[] {rnd.NextDouble(), rnd.NextDouble(), rnd.NextDouble()};
        Assert.AreEqual(Solution(testCase), Kata.Gimme(testCase));
      }
    }
  }
}
