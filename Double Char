//8 kyu
//Instructions: Given a string, you have to return a string in which each character (case-sensitive) is repeated once.


public class Kata
{
  public static string DoubleChar(string s)
  {
    string doubled = "";
    foreach(char c in s)
      {
        doubled+=c;
        doubled+=c;
      }
    return doubled;
  }
}

//test
using NUnit.Framework;
using System;
using System.Linq;

[TestFixture]
public class Test
{
  [Test]
  [TestCase("abcd", Result="aabbccdd")]
  [TestCase("Adidas", Result="AAddiiddaass")]
  [TestCase("1337", Result="11333377")]
  [TestCase("illuminati", Result="iilllluummiinnaattii")]
  [TestCase("123456", Result="112233445566")]
  [TestCase("%^&*(", Result="%%^^&&**((")]
  public static string FixedTest(string s)
  {
    return Kata.DoubleChar(s);
  }
  
  private static string Solution(string s)
  {
    return string.Join("", s.Select(x => "" + x + x));
  }
  
  [Test]
  public static void RandomTest([Random(1,30,100)] int len)
  {
    string s = RandomString(len, "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!ยง$%&/()=0987654321");
    Assert.AreEqual(Solution(s), Kata.DoubleChar(s), string.Format("Should work for {0}", s));
  }
  
  private static string RandomString(int randStrLength, string allowedChars)
	{
		string randStr = string.Empty;
		Random r = new Random();
		for(int i = 0; i < randStrLength; i++)
		{
			randStr += allowedChars[r.Next(allowedChars.Length)];
		}
		return randStr;
	}
}
