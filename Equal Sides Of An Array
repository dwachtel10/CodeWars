//6 kyu
//instructions:
//You are going to be given an array of integers. 
//Your job is to take that array and find an index N where the sum of the integers to the left of N is equal to the sum of the integers to the right of N. 
//If there is no index that would make this happen, return -1.

//Hoo boy. I strung this thing out, but it worked.
using System;

public class Kata
{
  public static int FindEvenIndex(int[] arr)
  {
    int final = -1;
    int index = 0;
    //start looping
    foreach(int x in arr)
    {
      
      int leftSide = 0;
      int rightSide = 0;
      
      
      if (index == 0) 
        {
          for (int i = 1; i < arr.Length; i++)
            {rightSide += arr[i];}
        }
      else if (index == arr.Length)
        {
          for (int i = 0; i < arr.Length; i++)
            {leftSide += arr[i];}
        }
      else
        {
          for (int i = 0; i < index; i++)
            {leftSide += arr[i];}
          for(int i = index + 1; i < arr.Length; i++)
            {rightSide += arr[i];}
        }
      
      if (leftSide == rightSide)
        {
          final = index;
          break;
        }
      
      else{
      index += 1;
      }
     }
    
    return final;
   }
  }
  
//tests

using NUnit.Framework; 
using System.Collections.Generic;
using System.Linq;
using System;
[TestFixture]
public class ValidateWordTest
{
  [Test]
  public void GenericTests()
  {
    Assert.AreEqual(3,Kata.FindEvenIndex(new int[] {1,2,3,4,3,2,1}), "The array was: {1,2,3,4,3,2,1}");
    Assert.AreEqual(1,Kata.FindEvenIndex(new int[] {1,100,50,-51,1,1}), "The array was: {1,100,50,-51,1,1}");
    Assert.AreEqual(-1,Kata.FindEvenIndex(new int[] {1,2,3,4,5,6}), "Remember to return -1 if there isn't an index that will work.");
    Assert.AreEqual(3,Kata.FindEvenIndex(new int[] {20,10,30,10,10,15,35}), "The array was: {20,10,30,10,10,15,35}");
  }
  //----------------------
  public static int FindEvenIndexT(int[] arr)
    {
        List<int> list = new List<int>(arr);
        for (int i = 0; i < list.Count; i++)
        {
            List<int> list1 = list.Take(i).ToList();
            List<int> list2 = list.Skip(i+1).Take(list.Count - i).ToList();
            if (list1.Sum() == list2.Sum())
            {
                return i;
            }
        }
        return -1;
    }
  //----------------------
  [Test]
  public static void RandomStringTests(){
      Console.WriteLine("\n ********** 50 Random Tests **********");
      Random rnd = new Random();
      
      for (int i = 0; i < 50; i++) {
        int trueOrFalse = rnd.Next(1,3);
        int index= 0;
        List<int> output = new List<int>();
        int rando = rnd.Next(2,500);
        for(int j = 0; j<rando; j++)
        {
          int n = rnd.Next(-10000, 10000);
          output.Add(n);
        }
        if(trueOrFalse == 1)
        { 
          index = rnd.Next(1,output.Count);
          List<int> list1 = output.Take(index).ToList();
          List<int> list2 = output.Skip(index+1).Take(output.Count - index).ToList();
          output.Add(list1.Sum() - list2.Sum());
        }
        Assert.AreEqual(FindEvenIndexT(output.ToArray()), Kata.FindEvenIndex(output.ToArray()), "The failed array was: " +string.Join(",", output));
      }
    }
}
