//7 kyu
//Instructions:
//Implement a method that accepts 3 integer values a, b, c. 
//The method should return true if a triangle can be built with the sides of given length and false in any other case.
//(In this case, all triangles must have surface greater than 0 to be accepted).
public class Triangle
{
    public static bool IsTriangle(int a, int b, int c) => ((a>0 && b>0 && c>0) && ((a+b)>c && (a+c)>b && (b+c)>a));
}


//tests
using NUnit.Framework;
using System;

[TestFixture]
public class TriangleTests
{
    [Test]
    public void IsTriangle_ValidPostiveNumbers_ReturnsTrue()
    {
        Assert.IsTrue(Triangle.IsTriangle(5, 7, 10));
    }
    
    [TestCase(1, 2, 3)]
    [TestCase(1, 3, 2)]
    [TestCase(3, 1, 2)]
    public void IsTriangle_SumOfSidesEqualOtherSide_ReturnsFalse(int a, int b, int c)
    {
        Assert.IsFalse(Triangle.IsTriangle(a, b, c));
    }

    [TestCase(-1, 2, 3)]
    [TestCase(1, -2, 3)]
    [TestCase(1, 2, -3)]
    public void IsTriangle_NegativeSides_ReturnsFalse(int a, int b, int c)
    {
        Assert.IsFalse(Triangle.IsTriangle(a, b, c));
    }
    
    [TestCase(1, 2, 4)]
    [TestCase(4, 1, 2)]
    [TestCase(1, 4, 2)]
    public void IsTriangle_PositiveSides_ReturnsFalse(int a, int b, int c)
    {
         Assert.IsFalse(Triangle.IsTriangle(a, b, c));
    }
}
